import { ethers } from 'ethers';
import { Token } from '@/types/pulsechain';

// ABI for ERC20 tokens
const erc20ABI = [
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function decimals() view returns (uint8)",
  "function balanceOf(address) view returns (uint256)",
  "function totalSupply() view returns (uint256)"
];

// Common PulseChain tokens data (optional fallback)
const commonTokens = [
  {
    address: "0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39", // HEX
    name: "HEX",
    symbol: "HEX",
    decimals: 8
  },
  {
    address: "0x95B303987A60C71504D99Aa1b13B4DA07b0790ab", // PLSX
    name: "PulseX",
    symbol: "PLSX",
    decimals: 18
  },
  {
    address: "0xA1077a294dDE1B09bB078844df40758a5D0f9a27", // WPLS
    name: "Wrapped PLS",
    symbol: "WPLS",
    decimals: 18
  },
  {
    address: "0x2fa878Ab3F87CC1C9737Fc071108F904c0B0C95d", // INC
    name: "Incentive",
    symbol: "INC",
    decimals: 18
  },
  {
    address: "0xefD766cCb38EaF1dfd701853BFCe31359239F305", // DAI
    name: "DAI Stablecoin",
    symbol: "DAI",
    decimals: 18
  }
];

// PulseScan API configuration
const PULSESCAN_API_URL = 'https://api.scan.pulsechain.com/api';

export const getProvider = () => {
  const rpcUrl = 'https://rpc.pulsechain.com';
  return new ethers.JsonRpcProvider(rpcUrl);
};

export const getPLSBalance = async (walletAddress: string): Promise<string> => {
  try {
    const provider = getProvider();
    const balance = await provider.getBalance(walletAddress);
    return balance.toString();
  } catch (error) {
    console.error('Error fetching PLS balance:', error);
    return '0';
  }
};

export const getTokenBalance = async (
  walletAddress: string,
  tokenAddress: string
): Promise<string> => {
  try {
    const provider = getProvider();
    const tokenContract = new ethers.Contract(tokenAddress, erc20ABI, provider);
    const balance = await tokenContract.balanceOf(walletAddress);
    return balance.toString();
  } catch (error) {
    console.error(`Error fetching balance for token ${tokenAddress}:`, error);
    return '0';
  }
};

export const getTokenMetadata = async (tokenAddress: string) => {
  try {
    const provider = getProvider();
    const tokenContract = new ethers.Contract(tokenAddress, erc20ABI, provider);
    const [name, symbol, decimals] = await Promise.all([
      tokenContract.name(),
      tokenContract.symbol(),
      tokenContract.decimals()
    ]);
    return { name, symbol, decimals: Number(decimals) };
  } catch (error) {
    console.error(`Error fetching metadata for token ${tokenAddress}:`, error);
    return null;
  }
};

export const getFirstTxDate = async (walletAddress: string): Promise<Date | null> => {
  try {
    const response = await fetch(
      `${PULSESCAN_API_URL}?module=account&action=txlist&address=${walletAddress}&sort=asc`
    );
    const data = await response.json();
    if (data.status === '1' && data.result.length > 0) {
      const firstTx = data.result[0];
      return new Date(Number(firstTx.timeStamp) * 1000);
    }
    return null;
  } catch (error) {
    console.error('Error fetching first transaction date:', error);
    return null;
  }
};

/**
 * Fetches all ERC20 token balances for a wallet using PulseScan API
 */
export const getAllTokenBalances = async (walletAddress: string): Promise<Token[]> => {
  try {
    // Fetch token transfers to identify tokens held
    const response = await fetch(
      `${PULSESCAN_API_URL}?module=account&action=tokentx&address=${walletAddress}&sort=desc`
    );
    const data = await response.json();
    
    if (data.status !== '1') {
      throw new Error('PulseScan API error: ' + data.message);
    }

    // Extract unique token addresses from transfer events
    const tokenAddresses = [...new Set(data.result.map((tx: any) => tx.contractAddress))];

    // Fetch metadata and balances for each token
    const tokens: Token[] = await Promise.all(
      tokenAddresses.map(async (tokenAddress: string) => {
        const metadata = await getTokenMetadata(tokenAddress);
        if (!metadata) return null;

        const balance = await getTokenBalance(walletAddress, tokenAddress);
        if (balance === '0') return null;

        return {
          address: tokenAddress,
          name: metadata.name,
          symbol: metadata.symbol,
          decimals: metadata.decimals,
          balance,
          lastActivityTime: new Date(), // Could be updated with tx timestamp
          usdValue: '0', // Requires price API
          tokenImageUrl: getTokenImageUrl(tokenAddress, metadata.symbol)
        };
      })
    );

    // Filter out null entries and zero balances
    return tokens.filter((token): token is Token => token !== null);
  } catch (error) {
    console.error('Error fetching all token balances:', error);
    return [];
  }
};

export const getDirectWalletData = async (walletAddress: string) => {
  try {
    const [plsBalance, tokens, firstTxDate] = await Promise.all([
      getPLSBalance(walletAddress),
      getAllTokenBalances(walletAddress),
      getFirstTxDate(walletAddress)
    ]);
    
    return {
      plsBalance,
      tokens,
      firstTxDate
    };
  } catch (error) {
    console.error('Error fetching wallet data:', error);
    throw new Error('Failed to fetch wallet data from blockchain');
  }
};

function getTokenImageUrl(address: string, symbol: string): string {
  const pulseScanBase = "https://scan.pulsechain.com/token/images";
  const knownImages: Record<string, string> = {
    "0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39": `${pulseScanBase}/main/hex.png`,
    "0x95B303987A60C71504D99Aa1b13B4DA07b0790ab": `${pulseScanBase}/main/plsx.png`,
    "0xA1077a294dDE1B09bB078844df40758a5D0f9a27": "https://dd.dexscreener.com/ds-data/tokens/pulsechain/0xa1077a294dde1b09bb078844df40758a5d0f9a27.png?size=xl&key=ee7126",
    "0x2fa878Ab3F87CC1C9737Fc071108F904c0B0C95d": `${pulseScanBase}/main/inc.png`,
    "0xefD766cCb38EaF1dfd701853BFCe31359239F305": "https://assets.coingecko.com/coins/images/9956/small/Badge_Dai.png"
  };
  return knownImages[address] || `${pulseScanBase}/${symbol.toLowerCase().substring(0, 2)}/${symbol.toLowerCase()}.png`;
}